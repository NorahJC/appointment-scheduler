{"version":3,"sources":["components/SelectTime/SelectTime.js","components/SlotList/SlotList.js","components/Modal/Modal.js","containers/App.js","serviceWorker.js","index.js"],"names":["SelectTime","className","times","id","time","SlotList","map","hour","key","Modal","type","class","data-dismiss","name","placeholder","required","pattern","vale","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAkBeA,G,UAfI,WACf,OACI,6BACI,yBAAKC,UAAU,MACX,wDAEJ,gCCNNC,G,MAAQ,CACV,CAAIC,GAAI,IACJC,KAAM,YAEV,CAAID,GAAI,IACJC,KAAM,aAEV,CAAID,GAAI,IACJC,KAAM,aAEV,CAAID,GAAI,IACJC,KAAM,YAEV,CAAID,GAAI,IACJC,KAAM,WAEV,CAAID,GAAI,IACJC,KAAM,WAEV,CAAID,GAAI,IACJC,KAAM,WAEV,CAAID,GAAI,IACJC,KAAM,aAeCC,EAXE,kBACb,yBAAKJ,UAAU,iBACVC,EAAMI,IAAI,SAAAC,GAAI,OACX,yBAAKN,UAAU,aAAaO,IAAOD,EAAKJ,IACpC,4BAAQF,UAAU,YAAYM,EAAKH,WCPpCK,G,MAxBD,WACV,OACI,6BACI,0BAAMN,GAAG,cACL,4BAAQO,KAAK,SAASC,MAAM,QAAQC,eAAa,SAAjD,QACA,4CACA,yBAAKX,UAAU,cACX,2BAAOA,UAAU,OAAjB,SACI,0BAAMA,UAAU,kBAAhB,KACA,2BAAOS,KAAK,OAAOP,GAAG,OAAOU,KAAK,OAAOC,YAAa,WAAWC,UAAQ,KAE7E,2BAAOd,UAAU,OAAjB,WACI,0BAAMA,UAAU,kBAAhB,KACA,2BAAOS,KAAK,MAAMP,GAAG,SAASU,KAAK,SAASG,QAAQ,6BAA6BF,YAAY,eAAeC,UAAQ,MAI5H,6BACI,2BAAOd,UAAU,WAAWS,KAAK,SAASO,KAAK,gB,MCApDC,MAff,WACE,OACE,yBAAKjB,UAAU,QACb,6BACE,wBAAIA,UAAU,SAAd,8BAGF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8232a358.chunk.js","sourcesContent":["import React from 'react';\nimport './SelectTime.css';\n\nconst SelectTime = () => {\n    return(\n        <div>\n            <div className=\"bg\">\n                <h2>Friday, August 13, 2019</h2>\n            </div>\n            <hr/>\n            {/* <div className=\"btn-design\">\n                <button className=\"btn-slot\"> {times} </button>\n            </div> */}\n        </div>\n\n    );\n}\n\nexport default SelectTime;","import React from 'react';\nimport './SlotList.css';\n\nconst times = [\n    {   id: \"1\",\n        time: \"9am-10am\"\n    },\n    {   id: \"2\", \n        time: \"10am-11am\"\n    },\n    {   id: \"3\",\n        time: \"11am-12pm\"\n    },\n    {   id: \"4\",\n        time: \"12pm-1pm\"\n    },\n    {   id: \"5\",\n        time: \"1pm-2pm\"\n    },\n    {   id: \"6\",\n        time: \"2pm-3pm\"\n    },\n    {   id: \"7\",\n        time: \"3pm-4pm\"\n    },\n    {   id: \"8\",\n        time: \"4pm-5pm\"\n    }\n];\n\nconst SlotList = () => (\n    <div className=\"btn-container\">\n        {times.map(hour => (\n            <div className=\"btn-design\" key = {hour.id}>\n                <button className=\"btn-slot\">{hour.time}</button>\n            </div>\n            \n        ))}\n    </div>\n);\n\nexport default SlotList;","import React from 'react';\nimport './Modal.css';\n\nconst Modal = () => {\n    return (\n        <div >\n            <form id=\"modal-cont\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                <h2>Reserve Slot</h2>\n                <div className=\"label-cont\">\n                    <label className=\"mod\"> Name: \n                        <span className=\"field-required\">*</span>\n                        <input type=\"text\" id=\"name\" name=\"name\" placeholder= \"Jane Doe\" required/>\n                    </label>\n                    <label className=\"mod\"> Number:\n                        <span className=\"field-required\">*</span> \n                        <input type=\"tel\" id=\"number\" name=\"number\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\" placeholder=\"678-200-3000\" required/>\n                    </label>\n                </div>\n                \n                <div>\n                    <input className=\"w3-input\" type=\"submit\" vale=\"Submit\"/>\n                </div>\n            </form>\n        </div>\n    );\n}\nexport default Modal;","import React from 'react';\nimport SelectTime from '../components/SelectTime/SelectTime';\nimport SlotList from '../components/SlotList/SlotList';\nimport Modal from '../components/Modal/Modal';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"body\">\n      <div>\n        <h1 className=\"title\">The Appointment Scheduler</h1>\n      </div>\n      {/* <TimeSlot /> */}\n      <SelectTime />\n      <SlotList />\n      <Modal/>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}